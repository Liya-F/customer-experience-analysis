-- Drop tables if they exist
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE reviews CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE banks CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- Create banks table
CREATE TABLE banks (
    bank_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) UNIQUE NOT NULL
);

-- Create reviews table
CREATE TABLE reviews (
    review_id NUMBER PRIMARY KEY,
    review_text CLOB,
    rating NUMBER,
    review_date DATE,
    bank_id NUMBER REFERENCES banks(bank_id),
    source VARCHAR2(50),
    vader_sentiment VARCHAR2(20),
    compound_score FLOAT,
    bert_sentiment VARCHAR2(20),
    bert_score FLOAT,
    identified_theme CLOB
);

-- Insert bank(s)
INSERT INTO banks (name) VALUES ('Commercial Bank of Ethiopia');

-- Commit banks insert
COMMIT;

-- Get bank_id for 'Commercial Bank of Ethiopia'
DECLARE
    v_bank_id NUMBER;
BEGIN
    SELECT bank_id INTO v_bank_id FROM banks WHERE name = 'Commercial Bank of Ethiopia';

    -- Insert reviews
    INSERT INTO reviews (
        review_id, review_text, rating, review_date, bank_id, source,
        vader_sentiment, compound_score, bert_sentiment, bert_score, identified_theme
    ) VALUES (
        0,
        'the app is proactive and a good connections.',
        5,
        TO_DATE('2025-06-05', 'YYYY-MM-DD'),
        v_bank_id,
        'Google Play',
        'positive',
        0.6908,
        'positive',
        0.9998679161071777,
        'App Performance, Customer Satisfaction'
    );

    INSERT INTO reviews (
        review_id, review_text, rating, review_date, bank_id, source,
        vader_sentiment, compound_score, bert_sentiment, bert_score, identified_theme
    ) VALUES (
        1,
        'I cannot send to cbebirr app. through this app.',
        3,
        TO_DATE('2025-06-05', 'YYYY-MM-DD'),
        v_bank_id,
        'Google Play',
        'neutral',
        0.0,
        'negative',
        0.9953354001045227,
        'App Performance'
    );

    INSERT INTO reviews (
        review_id, review_text, rating, review_date, bank_id, source,
        vader_sentiment, compound_score, bert_sentiment, bert_score, identified_theme
    ) VALUES (
        2,
        'good',
        4,
        TO_DATE('2025-06-05', 'YYYY-MM-DD'),
        v_bank_id,
        'Google Play',
        'positive',
        0.4404,
        'positive',
        0.9998161196708679,
        'Customer Satisfaction'
    );

    INSERT INTO reviews (
        review_id, review_text, rating, review_date, bank_id, source,
        vader_sentiment, compound_score, bert_sentiment, bert_score, identified_theme
    ) VALUES (
        3,
        'not functional',
        1,
        TO_DATE('2025-06-05', 'YYYY-MM-DD'),
        v_bank_id,
        'Google Play',
        'neutral',
        0.0,
        'negative',
        0.999778687953949,
        'Uncategorized'
    );

    INSERT INTO reviews (
        review_id, review_text, rating, review_date, bank_id, source,
        vader_sentiment, compound_score, bert_sentiment, bert_score, identified_theme
    ) VALUES (
        4,
        'everytime you uninstall the app you have to reach them out physically. very oldy! if that''s one of security layer, they''d check for fraud attempt via app source directly(source:- app store, play store ... etc) implicitly ! we are in 2025, physical presence for every app install is traditional(traditionally very rare).',
        1,
        TO_DATE('2025-06-04', 'YYYY-MM-DD'),
        v_bank_id,
        'Google Play',
        'positive',
        0.1739,
        'negative',
        0.9905162453651428,
        'App Performance'
    );

    COMMIT;
END;
/
